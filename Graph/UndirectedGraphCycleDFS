package Graph;

import java.util.*;

//Given an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether the graph contains any cycle or not.
// The Graph is represented as an adjacency list, where adj[i] contains all the vertices that are directly connected to vertex i.
//        NOTE: The adjacency list represents undirected edges, meaning that if there is an edge between vertex i and vertex j, both
//        j will be adj[i] and i will be in adj[j].
//        Examples:
//        Input: adj = [[1], [0,2,4], [1,3], [2,4], [1,3]]
//        Output: 1
//        Explanation:
//        1->2->3->4->1 is a cycle.
//        Input: adj = [[], [2], [1,3], [2]]
//        Output: 0
//        Explanation:
//        No cycle in the graph.
// this cas also be done with both dfs and bfs
//also multiple component graph could be possible
public class UndirectedGraphCycleDFS {
    public static boolean detectcycledfs(boolean[] visited,Map<Integer, List<Integer>> map,int node,int parentnode){
        visited[node]=true;
        for(Integer it:map.get(node)){
            if(!visited[it]){
                if(detectcycledfs(visited,map,it,node)==true)
                    return true;
            }
            else if(it!=parentnode)return true;
        }
        return false;
    }
    public static void main(String[] args){
       int mat[][] = {{1}, {0,2,4}, {1,3}, {2,4}, {1,3}};

       //int[][] mat={{},{2},{1,3},{2}};
        int n=mat.length;
        Map<Integer, List<Integer>> map=new HashMap<>();
        for(int i=0; i<n; i++){
            map.put(i,new ArrayList<>());
            for(int j=0; j<mat[i].length; j++){
                map.get(i).add(mat[i][j]);
            }
        }
        boolean iscycle=false;
        boolean[] visited=new boolean[n];

        for(int i=0; i<n; i++){
            if(!visited[i]){
                if(detectcycledfs(visited,map,i,-1)==true)
                {iscycle=true;
                    break;}

            }
        }
       System.out.print(iscycle);


    }


}
