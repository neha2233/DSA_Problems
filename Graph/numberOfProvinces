package Graph;

import java.util.*;

//There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b,
// and city b is connected directly with city c, then city a is connected indirectly with city c.
//        A province is a group of directly or indirectly connected cities and no other cities outside of the group.
//        You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly
//        connected, and isConnected[i][j] = 0 otherwise.
//        Return the total number of provinces.
//        Example 1:
//        Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
//        Output: 2
//        Example 2:
//        Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
//        Output: 3
//
 class numberOfProvinces {
    public static void solve(Set<Integer> visited, Queue<Integer> q,   Map<Integer, List<Integer>> adjList,int adjacent ){
        q.add(adjacent);
        visited.add(adjacent);
        while(!q.isEmpty()){
         int node=q.poll();
            for(Integer ad: adjList.get(node)){
                if(!visited.contains(ad)){
                   visited.add(ad);
                   q.add(ad);

                }
            }
        }
    }
    public static void main(String[] args){
        int[][] grid={{1,1,0},{1,1,0},{0,0,1}};
        int n=grid.length;
        int m=grid[0].length;
        Map<Integer, List<Integer>> adjList=new HashMap<>();

        for(int i=0; i<n; i++){
            adjList.put(i,new ArrayList<>());
            for(int j=0; j<grid[i].length; j++){
                if(grid[i][j]==1 && i!=j)
                adjList.get(i).add(j);
            }
        }
        Set<Integer> visited=new HashSet<>();
        Queue<Integer> q=new LinkedList<>();

        int cnt=0;

        for(int i=0; i<n; i++){
            if(!visited.contains(i)){
                solve(visited,q,adjList,i);
                cnt++;
            }
        }


       System.out.println(cnt);
    }
}

