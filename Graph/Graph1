package Graph;

import java.util.*;

class Graph {
    private Map<Integer, List<Integer>> adjList;

    public Graph() {
        adjList = new HashMap<>();
    }

    // Add a vertex to the graph
    public void addVertex(int vertex) {
        adjList.putIfAbsent(vertex, new ArrayList<>());
    }

    // Add an edge (undirected by default)
    public void addEdge(int source, int destination, boolean isDirected) {
        adjList.putIfAbsent(source, new ArrayList<>());
        adjList.putIfAbsent(destination, new ArrayList<>());

        adjList.get(source).add(destination);
        if (!isDirected) {
            adjList.get(destination).add(source);
        }
    }

    // Print the adjacency list
    public void printGraph() {
        for (var entry : adjList.entrySet()) {
            System.out.println(entry.getKey() + " -> " + entry.getValue());
        }
    }

    // BFS (Breadth-First Search)
    public void bfs(int start) {
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        visited.add(start);

        System.out.print("BFS: ");
        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");

            for (int neighbor : adjList.get(vertex)) {
                if (!visited.contains(neighbor)) {
                    queue.add(neighbor);
                    visited.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    // DFS (Depth-First Search) using recursion
    public void dfs(int start) {
        Set<Integer> visited = new HashSet<>();
        System.out.print("DFS: ");
        dfsHelper(start, visited);
        System.out.println();
    }

    private void dfsHelper(int vertex, Set<Integer> visited) {
        if (visited.contains(vertex)) return;

        System.out.print(vertex + " ");
        visited.add(vertex);

        for (int neighbor : adjList.get(vertex)) {
            dfsHelper(neighbor, visited);
        }
    }

    // Shortest path using BFS
    public void shortestPath(int start, int end) {
        Map<Integer, Integer> parent = new HashMap<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        parent.put(start, null);

        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            if (vertex == end) break;

            for (int neighbor : adjList.get(vertex)) {
                if (!parent.containsKey(neighbor)) {
                    queue.add(neighbor);
                    parent.put(neighbor, vertex);
                }
            }
        }

        // Backtrack to find the path
        if (!parent.containsKey(end)) {
            System.out.println("No path found!");
            return;
        }

        List<Integer> path = new ArrayList<>();
        for (Integer at = end; at != null; at = parent.get(at)) {
            path.add(at);
        }
        Collections.reverse(path);
        System.out.println("Shortest Path: " + path);
    }

    public static void main(String[] args) {
        Graph graph = new Graph();

        graph.addVertex(1);
        graph.addVertex(2);
        graph.addVertex(3);
        graph.addVertex(4);
        graph.addVertex(5);

        graph.addEdge(1, 2, false);
        graph.addEdge(1, 3, false);
        graph.addEdge(2, 4, false);
        graph.addEdge(3, 4, false);
        graph.addEdge(4, 5, false);

        graph.printGraph();

        graph.bfs(1);  // BFS Traversal
        graph.dfs(1);  // DFS Traversal
        graph.shortestPath(1, 5);  // Shortest Path from 1 to 5
    }
}
