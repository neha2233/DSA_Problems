package Recursion;
import java.util.*;
//    Given an integer array nums that may contain duplicates, return all possible
//        subsets
//        (the power set).
//        The solution set must not contain duplicate subsets. Return the solution in any order.
//        Example 1:
//        Input: nums = [1,2,2]
//        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
//        Example 2:
//        Input: nums = [0]
//        Output: [[],[0]]

public class SubsetSum2 {
    public static List<List<Integer>> solve(int[] nums, List<Integer> curr, List<List<Integer>>res, int i){
        if(i==nums.length){
            res.add(new ArrayList<>(curr));
            return res;
        }
       curr.add(nums[i]);
        solve(nums,curr,res,i+1);
        curr.remove(curr.size()-1);
        while (i+1< nums.length && nums[i]==nums[i+1])
        {
            i++;
        }
        solve(nums,curr,res,i+1);

        return res;
    }
    public static void main(String[] args){
        int n=3;
        int[] nums={1,2,2};
        Arrays.sort(nums);
        List<Integer>  curr=new ArrayList<>();

        List<List<Integer>> res=new ArrayList<>();

        List<List<Integer>> ans=solve(nums,curr,res,0);

        System.out.println(ans);


    }
}
