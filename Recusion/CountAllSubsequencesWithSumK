package Recursion;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

//Given an array arr of non-negative integers and an integer target, the task is to count all subsets of the array whose sum is equal to the given target.
// Input: arr[] = [5, 2, 3, 10, 6, 8], target = 10
// Output: 3
public class CountAllSubsequencesWithSumK {
    public static int solve(int[] arr, int target, int sum, List<Integer> res,int i){
        if(i==arr.length){
            if(sum==target)return 1;
            else return 0;
        }

        res.add(arr[i]);

        sum=sum+arr[i];
        int l=solve(arr,target,sum,res,i+1);

        res.remove(res.size()-1);
        sum=sum-arr[i];
        int r=solve(arr,target,sum,res,i+1);

        return r+l;

    }


    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] arr=new int[n];
        int target=sc.nextInt();

        for(int i=0; i<n; i++){
            int a=sc.nextInt();
            arr[i]=a;
        }
        List<Integer> res=new ArrayList<>();
        int count=solve(arr,target,0,res,0);
        System.out.println(count);
    }





}
