package Recursion;
//Given an m x n grid of characters board and a string word, return true if word exists in the grid.
//  The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
//  The same letter cell may not be used more than once.
//        Example 1:
//        Input: board = [["A","B","C","E"],
//                        ["S","F","C","S"],
//                        ["A","D","E","E"]], word = "ABCCED"
//        Output: true

public class WordSearch {
    public static boolean solve(char[][] board,String word,int row,int col,int k,int n , int m) {
     if(k==word.length()){
         return true;
     }
     if(row<0 || col<0 || row==n || col==m || word.charAt(k)!=board[row][col]|| board[row][col]=='!'){
         return false;
     }
     char c=board[row][col];
     board[row][col]='!';

        boolean top=solve(board,word,row-1,col,k+1,n,m);
        boolean right=solve(board,word,row,col+1,k+1,n,m);
        boolean bottom=solve(board,word,row+1,col,k+1,n,m);
        boolean left=solve(board,word,row,col-1,k+1,n,m);

        board[row][col]=c;

        return top || right || bottom || left;



    }
    public static boolean exist(char[][] board,String word){
        int n=board.length;
        int m=board[0].length;

        int k=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(board[i][j]==word.charAt(k)){
                    if(solve(board,word,i,j,k,n,m))
                        return true;

                }
            }
        }
        return false;
    }
    public static void main(String[] ans){
        char[][] board={{'A','B','C','E'},{'S','F','C','S'},{'A','D','E','E'}};
        String word="ABCCED";
       boolean res= exist(board,word);
        System.out.println(res);





    }
}
