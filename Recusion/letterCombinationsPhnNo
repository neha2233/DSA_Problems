package Recursion;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

//Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.
// Return the answer in any order.
// A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
// Example 1:
// Input: digits = "23"
// Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
public class letterCombinationsPhnNo {
    public static Map<Character,String> getMap(){
        Map<Character,String>map=new HashMap<>();
        map.put('2',"abc");
        map.put('3',"def");
        map.put('4',"ghi");
        map.put('5',"jkl");
        map.put('6',"mno");
        map.put('7',"pqrs");
        map.put('8',"tuv");
        map.put('9',"wxyz");
        return map;
    }
    public static void solve(int i, String s, String digits,List<String>ans,Map<Character,String>map){
        if(i==digits.length()){
            ans.add(s);
            return;
        }
        for(char c:map.get(digits.charAt(i)).toCharArray()){
            String temp=new String(s);
            temp+=c;
            solve(i+1,temp,digits,ans,map);
        }
    }


    public static void main(String[] args){
        String digits="23";
        Map<Character,String> map=getMap();
            List<String> ans=new ArrayList<>();
            if(digits.length()==0) System.out.println(ans);;
            String s="";
            solve(0,s,digits,ans,map);
            System.out.println(ans);

        }

}
