package Recursion;

import java.util.ArrayList;
import java.util.List;

//Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
//        Only numbers 1 through 9 are used.
//        Each number is used at most once.
//        Return a list of all possible valid combinations. The list must not contain the same combination twice, and
//        the combinations may be returned in any order.
//
//        Example 1:
//        Input: k = 3, n = 7
//        Output: [[1,2,4]]
//        Explanation:
//        1 + 2 + 4 = 7
//        There are no other valid combinations.
public class CombinationSum3 {
    public static List<List<Integer>> solve(int n, int k, List<Integer> curr, List<List<Integer>>res,int sum,int i){


            if (curr.size() == k) {
                if (sum == n) {
                    res.add(new ArrayList<>(curr));

                }
                return res;
            }
            if(i>=0 && curr.size() <k && sum<n) {
                curr.add(i);
                sum=sum+i;
                solve(n, k, curr, res, sum, i - 1);
                curr.remove(curr.size() - 1);
                sum=sum-i;
                solve(n, k, curr, res, sum, i - 1);
            }
     return res;
    }

    public static void main(String[] args){
        int n=7;
        int k=3;

        List<Integer> curr=new ArrayList<>();
        List<List<Integer>> res=new ArrayList<>();
        List<List<Integer>> ans=solve(n,k,curr,res,0,9);
        System.out.println(ans);
    }
}

