package Recursion;
//Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of
//candidates where the chosen numbers sum to target. You may return the combinations in any order.
//        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the
//        frequency of at least one of the chosen numbers is different.The test cases are generated such that the number of unique combinations
//        that sum up to target is less than 150 combinations for the given input.
//        Example 1:
//        Input: candidates = [2,3,6,7], target = 7
//        Output: [[2,2,3],[7]]
//        Explanation:
//        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
//        7 is a candidate, and 7 = 7.
//        These are the only two combinations.


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class combinationSum {
    public static List<List<Integer>> solve(int i,int sum,int target,int[] nums,List<Integer> temp,List<List<Integer>> res){
        if(sum>target)return res;

        if(i==nums.length){
            if(sum==target){
                res.add(new ArrayList<>(temp));

            }
            return res;
        }
        if(nums[i]<=target){
            temp.add(nums[i]);
            sum=sum+nums[i];
            solve(i,sum,target,nums,temp,res);
            temp.remove(temp.size()-1);

        }
        sum=sum-nums[i];
        solve(i+1,sum,target,nums,temp,res);

        return res;
    }

    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int target=7;

        int[] nums={2,3,6,7};

        List<List<Integer>> res=new ArrayList<>();
        List<Integer> temp=new ArrayList<>();
        List<List<Integer>> ans=solve(0,0,target,nums,temp,res);
        System.out.println(ans);
    }

}
