package SlidingWindow;


import java.util.HashMap;

//You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character.
// You can perform this operation at most k times.
//        Return the length of the longest substring containing the same letter you can get after performing the above operations.
//        Example 1:
//        Input: s = "ABAB", k = 2
//        Output: 4
//        Explanation: Replace the two 'A's with two 'B's or vice versa.
public class longestRepeatingCharacterReplacement {
    public static int solve(String s, int k){
        int maxi=0;
        int maxfre=0;
        int i=0;
        HashMap<Character,Integer> map=new HashMap<>();
        for(int j=0; j<s.length(); j++){
            char ch=s.charAt(j);
           map.put(ch,map.getOrDefault(ch,0)+1);
           maxfre=Math.max(maxfre,map.get(ch));

           while((j-i+1)-maxfre>k){
               char at_i=s.charAt(i);
               map.put(at_i,map.getOrDefault(at_i,0)-1);
               if(map.get(at_i)==0)
                   map.remove(at_i);
               i++;
                }


        maxi=Math.max(maxi,j-i+1);
        }
        return maxi;
    }
    public static void main(String[] args){
        String s="ABAB";
        int k=2;
        int ans=solve(s,k);
        System.out.println(ans);
    }
}
