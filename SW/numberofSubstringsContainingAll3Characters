package SlidingWindow;

public class numberofSubstringsContainingAll3Characters {
//    Given a string s consisting only of characters a, b and c.
//    Return the number of substrings containing at least one occurrence of all these characters a, b and c.
//            Example 1:
//    Input: s = "abcabc"
//    Output: 10
//    Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again).
//    Example 2:
//    Input: s = "aaacb"
//    Output: 3
//    Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb".
//    Example 3:
//    Input: s = "abc"
//    Output: 1


    public static int solve(String s){
        int[] lastseen={-1,-1,-1};
        int count=0;
        for(int j=0; j<s.length(); j++){
            lastseen[s.charAt(j)-'a']=j;
            if(lastseen[0]!=-1 && lastseen[1]!=-1 && lastseen[2]!=-1){
                //The smallest index among lastseen[0], lastseen[1], and lastseen[2] represents the first occurrence of the
                // last-required character.
                count=count+(1+Math.min(lastseen[0],Math.min(lastseen[1],lastseen[2])));
            }
        }
        return count;
    }
    public static void main(String[] agrs){

        String s="abcabc";
        int ans=solve(s);
        System.out.println(ans);



    }
}
