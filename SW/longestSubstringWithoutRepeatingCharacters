package SlidingWindow;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

//Given a string s, find the length of the longest substring without repeating characters.
//        Example 1:
//        Input: s = "abcabcbb"
//        Output: 3
//        Explanation: The answer is "abc", with the length of 3.
//
//        public static int solve(String s, String ans){
//        int maxi=0;
//        Map<Character,Integer> map=new HashMap<>();
//        int i=0;
//        for(int j=0; j<s.length(); j++){
//           char ch=s.charAt(j);
//
//           if(map.containsKey(ch)){
//               i=Math.max(i,map.get(ch)+1);
//           }
//          map.put(ch,j);
//           maxi=Math.max(maxi,j-i+1);
//
//        }
//        return maxi;
//    }
public class longestSubstringWithoutRepeatingCharacters {


    public static int solve(String s){
    int maxi=0;
    int i=0;
        HashSet<Character> set=new HashSet<>();
        for(int j=0; j<s.length(); j++){
            char at_j=s.charAt(j);
            while(set.contains(at_j)){
                char at_i=s.charAt(i);
                set.remove(s.charAt(i));
                i++;
            }
            set.add(at_j);
            maxi=Math.max(maxi,j-i+1);
        }
        return maxi;
        }
    public static void main(String[] args){
        String s="abcabcbb";

        int res=solve(s);
        System.out.println(res);
    }

}

